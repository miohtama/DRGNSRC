comment %

Double Dragon II EQU file
November 2021

Generated by reverse engineering dragon.exe compared to the available (UNdeleted) source code obtained from the released diskette.

The source was a few days older than the timestamp on dragon.exe and has a few minor changes that appear to have been applied 
after the source was copied+deleted off the disk.  

These changes can be brought in or out of the build by changing RELEASE_BUILD to 0 or 1.

%
; Enabling this results in an extremely close bytematch to dragon.exe, so it is reccommended to keep it set to 1
RELEASE_BUILD equ 1



; player actions
 being_dead equ 0
 standing equ 2ah 
 walking	equ 2
 climbing equ 1ah
 holding_up equ 36h



; actions byte
 fire equ 10h

 jump_vel equ 0fffbh ;@26f1 ddinster 127
 jump_kicking equ 08
 head_butting equ 0eh
 being_carried equ 0ah
 being_picked_up equ 0ch
 picking_up_s equ 24h
 picking_up_l equ 26h ;@532c 820 ddintel
 turn_kicking equ 0ah
 
 punching equ 4
 kicking equ 6 ; ddintel 585, @50ce
 elbowing equ 0ch

 kicking_rock equ 03ch
 travelling equ 6
 throwing_rock equ 18h
 club_swinging equ 10h
 whipping equ 12h
 jumping equ 14h
 throwing_knife equ 16h
 dropping equ 4
 being_used equ 8 ; ddintel, 509 dragon.exe 4fee @weapon_held

 throwing_man equ 2eh
 being_thrown equ 30h ; ddinstr, 443 @ 2a91

; ddintel.asm
 walkable equ 0
 climbable equ 9
 flying_side equ 34h ;ddintel 545, dragon 505b
 flying_back equ 32h ;ddwpon 767, dragon 3902.
 lying equ 2ch
 getting_up equ 20h
 collapsing equ 1eh
 bidye equ 40h
 kneeing equ 22h
 running equ 3eh
 linda equ 6 ; @4efb in ddintel, line 399

 hu_standing equ 38h
 ghost equ 28h ;@104e8

 player1 equ 0
 player2 equ 0ah

 nonexistent equ 0


 right equ 1 ; down+right is 5
 left equ 2  ; left+right must be 3
 down equ 4
 up equ 8

 push_up equ 12h
 push_down equ 22h
 push_left equ 0ch
 push_right equ 30h

;	vers is either 1 : cga 2 : vga !
 cga equ 1
 vga equ 2
 vers equ vga


; planes, used in wrte macro
 r_p equ 100h
 g_p equ 200h
 b_p equ 400h
 i_p equ 800h



 nawt_lad equ -1

; kicks byte
 ul_k equ 71
 up_k equ 72
 ur_k equ 73
 ul_k2 equ 23
 up_k2 equ 24
 ur_k2 equ 25
 
 right_k equ 77
 left_k equ 75
 dl_k equ 79
 down_k equ 80
 dr_k equ 81

 right_k2 equ 39
 left_k2 equ 37
 dl_k2 equ 51
 down_k2 equ 52
 dr_k2 equ 53





st_one equ 2
st_two equ 3


ul_jk equ 16 
up_j equ 124
ur_jk equ 18 

left_j equ 122	
fire_j equ 119
right_j equ 121

dl_jk equ 44 	
down_j equ 123
dr_jk equ 46 


up_jk equ 17
down_jk equ 45
left_jk equ 30
right_jk equ 32

fire_k equ 82
fire_jk equ 31
fire_k2 equ 38
five_k equ 76
space_k equ 57
escape_k equ 1
ret_k equ 28

jk_vel equ 0fffch ; @51e9 in dragon, 705 ddintel.asm  these are probably better defined as -4 or whatever
tk_vel equ 0fffbh ; 5359 in dragon, line 743 ddintel


bill equ 1ah ;50b0 576 ddintel

nobody equ -1
stationary equ 2

club equ 0
whip equ 2
knife equ 4
tnt equ 6
barrel equ 8
crate equ 0ah
rock equ 0ch
specwep equ 0eh



; doh.  after figuring these out by hand, a lot of them are in ddmain.asm - 1182!
weapact equ 42h
williams_A equ 0ch ;@103cf
williams_B equ 0eh ;@101df
williams_C equ 10h
williams equ 2

captain equ 18h
captainA equ 1eh
captainB equ 20h ;@1021b
captainC equ 22h ;@101f3
abobo equ 4
abobo_A equ 12h
fatty equ 24h ;@10483
wepon equ 26h ;@10154
roper equ 16h ;@104ab
lowry equ 1ch ;@104bf
big_boss_willy equ 8 ;@104d4
birth equ 44h ; @104e9 



fallable equ 0bh
fuse_length equ 32h ; @35b4, line 425
bw_x_disp equ 0	; @3685 
bw_y_disp equ -12 ; 368e
background equ 5
outside_map equ 0ffh



falling equ 1ch
too_high equ 0ah ; @1fc6, ddact 462
taking_punch equ 28h ;@ 22ca, ddact 971
being_kneed equ 3ah



; these should really be sizeof macros
per_list_size equ 18h
wep_list_size equ 12h

;=========================================================================================================
; MACROS
;=========================================================================================================
pushall macro
    push ax
    push bx
    push cx
    push dx
	push si
	push di
	push bp
	push ds
	push es
endm
popall macro
	pop	es
	pop	ds
	pop	bp
	pop	di
	pop	si
    pop dx
    pop cx
    pop bx
    pop ax
endm

; inverted flag jumps which allow larger distances
jp_e macro dest
LOCAL fwd
	jne fwd
	jmp dest
fwd:	
endm 
jp_b macro dest
	LOCAL fwd
	jae fwd
	jmp dest
fwd:
endm
jp_ge macro dest
	LOCAL fwd
	jl fwd
	jmp dest
fwd:
endm
jp_ne macro dest
	LOCAL fwd
	je fwd
	jmp dest
fwd:
endm
jp_z macro dest
LOCAL fwd
	jnz fwd
	jmp dest
fwd:
endm
jp_c macro dest
LOCAL fwd
	jnc fwd
	jmp dest
fwd:
endm
jp_a macro dest
	LOCAL fwd
	jbe fwd
	jmp dest
fwd:
endm

; delay for x somethings 
pause macro length
	LOCAL exit_pause, again, again2
	push	ax
	push	cx
	push	dx
	mov	cx, length
	shl cx, 1
	shl cx, 1
	shl	cx, 1
	shl	cx, 1
	mov	dx, 3dah
	jcxz exit_pause
again:
	in	al, dx
	test al, 8
	je	again
again2:	
	in	al, dx
	test al, 8
	jne	again2
	loop	again
exit_pause:	
	pop	dx
	pop	cx
	pop	ax
endm

; memory reservation. 
; samples:
; res_mem flip_tab  ,  256 , 1	;lets hope we are on a 256 byte boundary
; res_mem	   new_spr   , 4096 , 1
; res_mem		pl1_dat1 , 55656 ,27828
; it looks like the 3 rd param, whenever not 1, is always 1/2 the size.  Anytime it's used the refernce is
; externed as both BYTE and WORD, so it looks it's not needed in the macro.
res_mem macro name, size, halfsize
	name db size dup (?)
endm


; found at 57ca in dragon.exe  
; load_m2	dm2,[bx+51],g_disc
; load_m2   chr_blocks,[bx],g_disc
load_m2 macro map, file, disc
LOCAL fwd, back
	push	bx
back:
	mov ax, seg map
	mov [start_seg], ax

	mov	ax, offset map
	mov [start_offset], ax

	mov	ax, file
	mov	file_name, ax
	call load ;@2fa5
	cmp word ptr [errfl], 0
	je fwd
	mov	ax, g_disc
	call load_error ;@2bf0
	jmp back
fwd:	
	pop bx
endm

; this loads VGA/EGA
; load_m	char_map , chset_file , g_disc	;binary no need to convert.
load_m macro map, file, disc ; found at 14d7 in dragon.exe
LOCAL back, fwd
	push	bx
back:
	mov ax, seg map
	mov [start_seg], ax

	mov	ax, offset map
	mov [start_offset], ax
	
	mov	file_name,offset file
	call load ;@2fa5
	cmp word ptr [errfl], 0
	je fwd
	mov ax, [g_disc]
	call load_error ;@2bf0
	jmp back
fwd:	
	pop bx
endm

; load_mtan  big_chars , chf_ega , g_disc	;graphics so convert
load_mtan macro mapname, dest, var
LOCAL back, fwd
	push	bx
back:
	mov ax, seg mapname
	mov [start_seg], ax

	mov	ax, offset mapname
	mov [start_offset], ax
	
	mov	file_name,offset dest
	call load ;@2fa5
	cmp word ptr [errfl], 0
	je fwd
	mov ax, [g_disc]			; 15a8 in ddmain.exe
	call load_error ;@2bf0
	jmp back
fwd:
	pop bx
	
	; the above might just be a call to load_m with this appeneded.
	pushall
	mov ax, seg mapname
	mov es, ax
	mov di, offset mapname
	mov cx, len
	call cvert
	popall
	
endm


; jump table macro
; jmptab	action, control_table
; jmptab	name_, instr_table
jmptab macro name, table
	mov bl, name
	xor bh, bh
	add bx, offset table
	mov	dx,cs:[bx]
	jmp	dx
endm

; this macro is commented out in the source, so we don't know what it does, but probably something like this
; border	15
border macro color
;	push dx
;	push ax
;	mov ax, color
;	mov dx, 3c0h
;	out dx, ax
;	pop ax
;	pop dx
endm	
	

write	macro	plane
		mov	dx,3c4h
		mov	ax,plane+2
		out	dx,ax
endm

; called from ddmain, line 554 --> @e50
ldtab macro dest, name_, colrmap_table
	mov al, name_ ;@01eb0
	cbw
	add ax, offset colrmap_table  ;@4460
	mov bx, ax
	mov ax, [bx]
	mov dest, ax 
endm	